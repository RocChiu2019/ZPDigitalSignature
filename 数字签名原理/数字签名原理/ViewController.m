//
//  ViewController.m
//  数字签名原理
//
//  Created by 赵鹏 on 2018/12/11.
//  Copyright © 2018 赵鹏. All rights reserved.
//

/**
 参考网站：https://www.jianshu.com/p/02034d1a91b5
 
 因为外国人喜欢用支票，支票上面的签名就能证明这张支票是属于哪个人的。那么数字签名顾名思义，就是用于鉴别数字信息的方法。
 
 在支付的情景下，客户端向服务器提交一个支付请求，该支付请求内有标明需要支付的金额数值。在明文传递该请求的过程中第三方有可能会窃取到该明文信息并修改里面的支付金额，然后再传递给服务器，这样的话就会造成用户的数据不安全；
 为了避免上述情况的发生，服务器在接收到该支付请求的时候应该首先确认里面的支付金额有没有被改动过，所以在客户端发送这一支付请求之前应该先把支付请求用哈希函数变成一串哈希值，然后连同支付请求的明文一起发送给服务器，当服务器接收到这一数据的时候，服务器首先应该把支付请求变成一串哈希值，然后和一并传递过来的哈希值进行对比，如果两个哈希值一样则证明支付请求里面的支付金额没有被改动过，可以做后续的操作了，如果不一样则证明在传递的过程中支付请求被改动过，不能再继续做后面的操作了；
 但是上述的加密方式也有安全漏洞，漏洞就在于第三方窃取到支付请求的同时也有可能窃取到它所对应的哈希值，第三方可以把这两者都进行修改，然后再传递给服务器；
 想要完全杜绝安全漏洞的话，在客户端将要发送支付请求的时候先要把该支付请求用哈希函数变成一串哈希值，然后利用服务器的公钥给这串哈希值进行RSA非对称加密，然后把经过RSA加密过后的数据连同支付请求的明文一并发送给服务器，当服务器接收到传递过来的数据后，服务器首先应该把支付请求的明文变成哈希值，然后用自己的私钥把之前在客户端经过RSA加密过后的数据进行解密，得到另一个哈希值，然后把前后这两个哈希值进行比较，如果两个哈希值相同则证明在传输的过程中支付请求没有被篡改，可以进行后续的操作，如果不相同或者没办法进行解密，则证明在传输的过程中支付请求被篡改了，不能进行后续的操作了。
 上述的把在客户端中把支付请求经过哈希函数变成哈希值以后再用RSA非对称加密算法对这个哈希值加密过后的数据叫做这个支付请求的数字签名。综上所述，原始数据的哈希值用非对称加密算法(RSA)进行加密，就叫做数字签名。
 */
#import "ViewController.h"

@interface ViewController ()

@end

@implementation ViewController

#pragma mark ————— 生命周期 —————
- (void)viewDidLoad
{
    [super viewDidLoad];
    // Do any additional setup after loading the view, typically from a nib.
}

@end
